class Customer:
    """Represents a customer who places orders in the system."""

    def __init__(self, name, email, phone, address):
        self.__name = name
        self.__email = email
        self.__phone = phone
        self.__address = address

    # Getter and Setter Methods
    def get_name(self):
        return self.__name

    def set_name(self, name):
        self.__name = name

    def get_email(self):
        return self.__email

    def set_email(self, email):
        self.__email = email

    def place_order(self, order):
        """Allows the customer to place an order."""
        pass  # This function will process an order placement

    def get_details(self):
        """Returns customer details."""
        return f"Customer: {self.__name}, Email: {self.__email}, Phone: {self.__phone}"
    

class Order:
    """Represents a customer's order containing multiple items."""

    def __init__(self, order_id, customer, items, total_price):
        self.__order_id = order_id
        self.__customer = customer
        self.__items = items  # List of Item objects
        self.__total_price = total_price

    def calculate_total(self):
        """Calculates the total price of all items in the order."""
        pass  # This function should iterate through items and sum their prices

    def generate_delivery_note(self):
        """Generates a delivery note for the order."""
        pass  # This function will create a formatted delivery note
    

class Item:
    """Represents an individual product in an order."""

    def __init__(self, item_id, description, price, quantity):
        self.__item_id = item_id
        self.__description = description
        self.__price = price
        self.__quantity = quantity

    def calculate_item_total(self):
        """Calculates the total price for this item."""
        return self.__price * self.__quantity

    def get_item_details(self):
        """Returns item details."""
        return f"Item: {self.__description}, Quantity: {self.__quantity}, Total: {self.calculate_item_total()}"


class DeliveryNote:
    """Represents a delivery receipt for an order."""

    def __init__(self, note_id, order, delivery_address):
        self.__note_id = note_id
        self.__order = order
        self.__delivery_address = delivery_address

    def generate_note(self):
        """Creates a formatted delivery note."""
        pass  # This function will return a string with order and delivery details

    def print_note(self):
        """Prints the delivery note."""
        pass  # This function will format and display the delivery note
    

class DeliveryStaff:
    """Represents a delivery person responsible for handling deliveries."""

    def __init__(self, staff_id, name, phone):
        self.__staff_id = staff_id
        self.__name = name
        self.__phone = phone

    def update_order_status(self, order_id, status):
        """Updates the status of a given order."""
        pass  # This function will update the order status in the system

    def confirm_delivery(self, order_id):
        """Marks an order as delivered."""
        pass  # This function will confirm delivery and update records


class Admin:
    """Represents an administrator managing users and orders."""

    def __init__(self, admin_id, name):
        self.__admin_id = admin_id
        self.__name = name

    def manage_users(self):
        """Handles the addition, modification, or deletion of users."""
        pass  # This function will handle user management

    def manage_orders(self):
        """Manages orders, such as viewing and updating them."""
        pass  # This function will allow admin to manage orders
